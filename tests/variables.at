AT_BANNER([Special shell variables])

dnl
dnl The space after $ is to avoid expanding the variables in testsuite output,
dnl and to allow the variable names to be used as a testsuite keyword
dnl (e.g., "-k time").
dnl If the space is not desired, use "$[]foo" instead of "$ foo".
dnl

dnl
dnl TCSH_VAR_UNSET(VARIABLE)
dnl
dnl	Setup test group "$ NAME" to ensure that the NAME is unset,
dnl	and not testing any other specific functionality.
dnl

m4_define([TCSH_VAR_UNSET], [dnl
AT_SETUP([$ $1])
AT_KEYWORDS([variables unset])
AT_CHECK([tcsh -f -c 'echo $?$1'], ,
[0
])
AT_CLEANUP()
])


dnl
dnl	$ addsuffix
dnl

AT_SETUP([$ addsuffix])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo $?addsuffix'], ,
[1
])
dnl Nothing more

AT_CLEANUP()


dnl
dnl	$ afsuser
dnl

TCSH_VAR_UNSET([afsuser])


dnl
dnl	$ ampm
dnl

TCSH_VAR_UNSET([ampm])


dnl
dnl	$ anyerror
dnl

AT_SETUP([$ anyerror])
AT_KEYWORDS([variables])

echo 'exit 1' > myfalse
chmod +x myfalse

AT_DATA([exit_status.csh],
[[echo $?anyerror $anyerror
./myfalse | true ; echo $?
unset anyerror ; echo $?anyerror
./myfalse | true ; echo $?
set anyerror
./myfalse | true ; echo $?
]])

AT_CHECK([tcsh -f exit_status.csh],,
[1
1
0
0
1
])

AT_CLEANUP()


dnl
dnl	$ argv
dnl

AT_SETUP([$ argv])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo $argv; echo $2' foo bar baz], ,
[foo bar baz
bar
])

AT_CLEANUP()


dnl
dnl	$ autocorret
dnl

TCSH_VAR_UNSET([autocorrect])


dnl
dnl	$ autoexpand
dnl

TCSH_VAR_UNSET([autoexpand])

dnl
dnl	$ autolist
dnl

TCSH_VAR_UNSET([autolist])


dnl
dnl	$ autologout
dnl

TCSH_UNTESTED([$ autologout])


dnl
dnl	$ backslash_quote
dnl

AT_SETUP([$ backslash_quote])
AT_KEYWORDS([variables])

AT_DATA([backslash.csh],
[[echo $?backslash_quote
set echo_style=none
echo 'foo\\bar'
echo "foo\\bar"
echo 'foo\bar'
echo "foo\bar"
set backslash_quote
echo 'foo\\bar'
echo "foo\\bar"
echo 'foo\'bar'
echo 'foo\"bar'
echo "foo\"bar"
echo "foo\'bar"
echo 'foo\bar'
echo "foo\bar"
]])
AT_CHECK([tcsh -f backslash.csh], ,
[0
foo\\bar
foo\\bar
foo\bar
foo\bar
foo\bar
foo\bar
foo'bar
foo"bar
foo"bar
foo'bar
foo\bar
foo\bar
])

AT_CLEANUP()


dnl
dnl	$ catalog
dnl

TCSH_VAR_UNSET([catalog])


dnl
dnl	$ cdpath
dnl

AT_SETUP([$ cdpath])
AT_KEYWORDS([variables])

AT_DATA([cdpath.csh],
[[echo $?cdpath
set cdpath=($cwd /)
set home=$cwd
mkdir tcsh_test_dir
cd dev
cd tcsh_test_dir
]])
AT_CHECK([tcsh -f cdpath.csh], ,
[0
/dev @&t@
~/tcsh_test_dir @&t@
])

AT_CLEANUP()


dnl
dnl	$ color
dnl

TCSH_VAR_UNSET([color])


dnl
dnl	$ colorcat
dnl

TCSH_VAR_UNSET([colorcat])


dnl
dnl	$ command
dnl

AT_SETUP([$ command])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo $command'], ,
[echo $command
])

AT_DATA([command.csh],
[[echo $?command
]])
AT_CHECK([tcsh -f command.csh], ,
[0
])

AT_CLEANUP()


dnl
dnl	$ complete
dnl

TCSH_VAR_UNSET([complete])


dnl
dnl	$ continue
dnl

TCSH_VAR_UNSET([continue])


dnl
dnl	$ continue_args
dnl

TCSH_VAR_UNSET([continue_args])


dnl
dnl	$ correct
dnl

TCSH_VAR_UNSET([correct])


dnl
dnl	$ csubstnonl
dnl

AT_SETUP([$ csubstnonl])
AT_KEYWORDS([variables])

touch test_file

AT_DATA([csubstnonl.csh],
[[echo $?csubstnonl
echo `echo fail \
| sed 's/fail/OK/'`
sh -c 'echo 1 >&2'
(echo `echo fail | \\
sed 's/fail/OK/'`)
sh -c 'echo 2 >&2'
echo `echo a\
b`
unset csubstnonl
sh -c 'echo 3 >&2'
(echo `echo fail \
| sed 's/fail/OK/'`)
sh -c 'echo 4 >&2'
echo `echo fail | \\
sed 's/fail/OK/'`
echo `echo \\
?est_file`
echo `cat << END\
OK\
END`
]])
AT_CHECK([tcsh -f csubstnonl.csh], ,
[1
OK

a b
fail
OK
test_file
OK
],
[1
 sed: Command not found.
2
3
Invalid null command.
4
])

AT_CLEANUP()


dnl
dnl	$ cwd
dnl

AT_SETUP([$ cwd])
AT_KEYWORDS([variables])

AT_DATA([cwd.csh],
[[echo $?cwd
printenv PWD
cd /
echo $cwd
pushd /dev
echo $cwd
popd
echo $cwd
printenv PWD
setenv PWD foo
echo $cwd
set cwd=bar
printenv PWD
]])
AT_CHECK([tcsh -f cwd.csh | sed "s,$PWD,CWD,"], ,
[1
CWD
/
/dev / @&t@
/dev
/ @&t@
/
/
/
foo
])

AT_CLEANUP()


dnl
dnl	$ dextract
dnl

dnl Functionality tested with "pushd"
TCSH_VAR_UNSET([dextract])


dnl
dnl	$ dirsfile
dnl

TCSH_VAR_UNSET([dirsfile])


dnl
dnl	$ dirstack
dnl

AT_SETUP([$ dirstack])
AT_KEYWORDS([variables])

AT_DATA([dirstack.csh],
[[echo $dirstack
set home=$cwd
pushd /
echo $dirstack
set dirstack=(/ /dev $home)
# The first popd does nothing, looks like a bug
popd
popd
echo $dirstack
]])
AT_CHECK([tcsh -f dirstack.csh | sed "s,$PWD,CWD,g"], ,
[CWD
/ ~ @&t@
/ CWD
/ /dev ~ @&t@
/dev ~ @&t@
/dev CWD
])

AT_CLEANUP()


dnl
dnl	$ dspmbyte
dnl

TCSH_UNTESTED([$ dspmbyte])


dnl
dnl	$ dunique
dnl

dnl Functionality tested with "pushd"
TCSH_VAR_UNSET([dunique])


dnl
dnl	$ echo
dnl

AT_SETUP([$ echo])
AT_KEYWORDS([variables])

touch some_file;

AT_CHECK([tcsh -f -c 'echo $?echo'], ,
[0
])

AT_CHECK([tcsh -f -x -c 'echo $?echo'], ,
[1
],
[echo 1
])

AT_DATA([echo.csh],
[[ls some_*
set echo
ls some_* $echo
echo some_* $echo
]])
AT_CHECK([tcsh -f echo.csh], ,
[some_file
some_file
some_file
],
[ls some_file
echo some_*
])

AT_CLEANUP()


dnl
dnl	$ echo_style
dnl

AT_SETUP([$ echo_style])
AT_KEYWORDS([variables])

AT_DATA([echo_style.csh],
[[echo $?echo_style
set echo_style=bsd
echo -n foo
echo 'b\tr'
set echo_style=sysv
echo -n foo
echo 'b\tr'
set echo_style=both
echo -n foo
echo 'b\tr'
set echo_style=none
echo -n foo
echo 'b\tr'
]])
AT_CHECK([tcsh -f echo_style.csh], ,
[1
foob\tr
-n foo
b	r
foob	r
-n foo
b\tr
])

AT_CLEANUP()


dnl
dnl	$ echo_hex
dnl

AT_SETUP([$ echo_hex])
AT_KEYWORDS([variables])

AT_DATA([echo_hex.csh],
[[set echo_style=sysv
echo '\x'
echo '\xg'
echo '\x61'
echo '\x61g'
echo '\x{61}'
echo '\x{61}g'
echo '\x{61g'
echo '\u'
echo '\ug'
echo '\u61'
echo '\u61g'
]])
AT_CHECK([tcsh -f echo_hex.csh], ,
[\x
\xg
a
ag
a
ag
\x{61g
\u
\ug
a
ag
])

AT_CLEANUP()


dnl
dnl	$ edit
dnl
dnl Note that editing is disabled if stdin is not a terminal.
dnl

AT_SETUP([$ edit])
AT_KEYWORDS([variables])

AT_CHECK([TERM=something tcsh -f -c 'echo $?edit'], , [stdout])
AS_IF([test -t 0], [dnl
AT_CHECK([cat stdout], ,
[1
])
], [dnl
AT_CHECK([cat stdout], ,
[0
])
])

dnl Explicitly disable stdin as terminal
AT_CHECK([TERM=something tcsh -f -c 'echo $?edit' < /dev/null], ,
[0
])

AT_CHECK([TERM=dumb tcsh -f -c 'echo $?edit'], ,
[0
])

AT_CLEANUP()


dnl
dnl	$ ellipsis0
dnl

AT_SETUP([$ ellipsis])
AT_KEYWORDS([variables])

AT_DATA([ellipsis0.csh],
[[echo $?ellipsis
set home=$cwd
mkdir -p a/b
cd a/b
set prompt='%c01 '
]])
AT_CHECK([tcsh -f -i -q < ellipsis0.csh], ,
[> 0
~/<1>b exit
])

AT_DATA([ellipsis0.csh],
[[set ellipsis
set home=$cwd
mkdir -p a/b
cd a/b
set prompt='%c01 '
]])
AT_CHECK([tcsh -f -i -q < ellipsis0.csh], ,
[> ~...b exit
])

AT_CLEANUP()


dnl
dnl	$ fignore
dnl

TCSH_VAR_UNSET([fignore])


dnl
dnl	$ filec
dnl

TCSH_VAR_UNSET([filec])


dnl
dnl	$ gid
dnl

AT_SETUP([$ gid])
AT_KEYWORDS([variables])

AT_CHECK([(tcsh -f -c 'echo $gid'; id -gr) | uniq | wc -l | tr -d ' \t'], ,
[1
])

AT_CLEANUP()


dnl
dnl	$ group
dnl

AT_SETUP([$ group])
AT_KEYWORDS([variables])

AT_DATA([group.csh],
[[echo $?group
set group=foo
printenv GROUP
setenv GROUP bar
echo $group
]])
AT_CHECK([tcsh -f group.csh], ,
[1
foo
bar
])

AT_CLEANUP()


dnl
dnl	$ histchars
dnl

AT_SETUP([$ histchars])
AT_KEYWORDS([variables])

AT_DATA([histchars.csh],
[[echo $?histchars
set histchars='/+'
echo OK
/3
+K+k
]])
AT_CHECK([tcsh -f -q -i < histchars.csh], ,
[> 0
OK
OK
Ok
> exit
],
[echo OK
echo Ok
])

AT_CLEANUP()


dnl
dnl	$ histdup
dnl

AT_SETUP([$ histdup])
AT_KEYWORDS([variables history])

AT_DATA([histdup.csh],
[[echo $?histdup
history -c
: 1
: 2
: 1
history
set histdup=all
history -c
: 1
: 2
: 1
history
set histdup=prev
history -c
: 1
: 2
: 1
: 3
: 3
history
set histdup=erase
history -c
: 1
: 2
: 1
history
]])
AT_CHECK([[tcsh -f -q -i < histdup.csh] dnl
	   [| sed 's/	[^	]*	/ TIME /']], ,
[> 0
     3 TIME : 1
     4 TIME : 2
     5 TIME : 1
     6 TIME history
     9 TIME : 1
    10 TIME : 2
    11 TIME history
    14 TIME : 1
    15 TIME : 2
    16 TIME : 1
    17 TIME : 3
    18 TIME history
    22 TIME : 2
    23 TIME : 1
    24 TIME history
> exit
])

AT_CLEANUP()


dnl
dnl	$ histfile
dnl

dnl Behavior tested in history.at
TCSH_VAR_UNSET([histfile])


dnl
dnl	$ histlit
dnl

AT_SETUP([$ histlit])
AT_KEYWORDS([variables history])

AT_DATA([histlit.csh],
[[echo $?histlit
echo OK
!!
history
history -S hist1
set histlit
history
history -S hist2
]])
AT_CHECK([[tcsh -f -q -i < histlit.csh] dnl
	   [| sed 's/	[^	]*	/ TIME /']], ,
[> 0
OK
OK
     1 TIME echo $?histlit
     2 TIME echo OK
     3 TIME echo OK
     4 TIME history
     1 TIME echo $?histlit
     2 TIME echo OK
     3 TIME !!
     4 TIME history
     5 TIME history -S hist1
     6 TIME set histlit
     7 TIME history
> exit
],
[echo OK
])
AT_CHECK([[sed 's/^#+[0123456789]*$/#+STAMP/' < hist1]], ,
[#+STAMP
echo $?histlit
#+STAMP
echo OK
#+STAMP
echo OK
#+STAMP
history
#+STAMP
history -S hist1
])

AT_CHECK([[sed 's/^#+[0123456789]*$/#+STAMP/' < hist2]], ,
[#+STAMP
echo $?histlit
#+STAMP
echo OK
#+STAMP
!!
#+STAMP
history
#+STAMP
history -S hist1
#+STAMP
set histlit
#+STAMP
history
#+STAMP
history -S hist2
])

AT_CLEANUP()


dnl
dnl	$ history
dnl

AT_SETUP([$ history])
AT_KEYWORDS([variables])

AT_DATA([history.csh],
[[echo $#history $history
set home=$cwd
set var=value
set history=(1 '%/,%~,%h,%\!,\!,%%,%j,%$var,%#,%R\n')
: OK
history
]])
AT_CHECK([tcsh -f -i -q < history.csh | sed "s,$PWD,CWD,"], ,
[> 1 100
CWD,~,     6,     6,     6,%,0,value,>,history
> exit
])

AT_CLEANUP()


dnl
dnl	$ home
dnl

AT_SETUP([$ home])
AT_KEYWORDS([variables])

AT_DATA([home.csh],
[[echo $?home
(echo $home; echo ~) | uniq | wc -l | tr -d ' \t'
set home=/foo
printenv HOME
setenv HOME /bar
echo $home
]])
AT_CHECK([
case "$(uname -s)" in
Darwin)
    HOME=$(dscl . read "/Users/$USER" NFSHomeDirectory | awk '{ print $NF }')
    ;;
*)
    HOME=$(getent passwd $(id -un) | awk -F: '{ print $(NF - 1) }')
    ;;
esac;
export HOME;
tcsh -f home.csh
], ,
[1
1
/foo
/bar
])

AT_CHECK([(unset HOME; tcsh -f -c 'echo $?home; printenv HOME')], 1,
[0
])

AT_CLEANUP()


dnl
dnl	$ ignoreeof
dnl

TCSH_VAR_UNSET([ignoreeof])


dnl
dnl	$ implicitcd
dnl

AT_SETUP([$ implicitcd])
AT_KEYWORDS([variables])

AT_DATA([implicitcd.csh],
[[echo $?implicitcd
mkdir subdir
set home=$cwd
sh -c 'echo 1 >&2'
(subdir)
sh -c 'echo 2 >&2'
(~/subdir)
sh -c 'echo 3 >&2'
set implicitcd
subdir
/bin/pwd
..
~/subdir
/bin/pwd
cd
set implicitcd=verbose
subdir
..
~/subdir
]])
(echo 1; echo 'subdir: Command not found.';
 echo 2; echo "$PWD/subdir: Permission denied."; echo 3) > experr
AT_CHECK([tcsh -f -i -q < implicitcd.csh | sed "s,`/bin/pwd`,CWD,"], ,
[> 0
CWD/subdir
CWD/subdir
cd subdir
cd ..
cd ~/subdir
> exit
], [experr])

AT_CLEANUP()


dnl
dnl	$ inputmode
dnl

TCSH_VAR_UNSET([inputmode])


dnl
dnl	$ killdup
dnl

TCSH_VAR_UNSET([killdup])


dnl
dnl	$ killring
dnl

AT_SETUP([$ killring])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo $killring'], ,
[30
])
dnl Nothing more

AT_CLEANUP()


dnl
dnl	$ listflags
dnl

AT_SETUP([$ listflags])
AT_KEYWORDS([variables ls-F])

dnl First word checked with ls-F
AT_DATA([listflags.csh],
[[echo $?listflags
set listflags=(-xA $cwd/args.sh)
ls-F -something .
]])
AT_DATA([args.sh],
[[echo "$@"
]])
chmod a+x args.sh
AT_CHECK([tcsh -f listflags.csh], ,
[0
-xFA -something .
])

AT_CLEANUP()


dnl
dnl	$ listjobs
dnl

TCSH_VAR_UNSET([listjobs])


dnl
dnl	$ listlinks
dnl

dnl Functionality tested with "ls-F"
TCSH_VAR_UNSET([listlinks])


dnl
dnl	$ listmax
dnl

TCSH_VAR_UNSET([listmax])


dnl
dnl	$ listmaxrows
dnl

TCSH_VAR_UNSET([listmaxrows])


dnl
dnl	$ loginsh
dnl

dnl Can't test the other case
TCSH_VAR_UNSET([loginsh])


dnl
dnl	$ logout
dnl

TCSH_VAR_UNSET([logout])


dnl
dnl	$ mail
dnl

AT_SETUP([$ mail])
AT_KEYWORDS([variables])

AT_DATA([mail.csh],
[[echo $?mail
mkdir maildir
touch spool
set mail=(0 spool maildir)
echo > maildir/1
echo > maildir/2
echo >> spool
echo >> spool
]])
AT_CHECK([tcsh -f mail.csh], ,
[0
])

AT_CLEANUP()


dnl
dnl	$ cdtohome
dnl

AT_SETUP([$ cdtohome])
AT_KEYWORDS([variables])

AT_CHECK([
case "$(uname -s)" in
Darwin)
    HOME=$(dscl . read "/Users/$USER" NFSHomeDirectory | awk '{ print $NF }')
    ;;
*)
    HOME=$(getent passwd $(id -un) | awk -F: '{ print $(NF - 1) }')
    ;;
esac;
export HOME;
tcsh -f -c 'cd'
], 0)
AT_CLEANUP()


dnl
dnl	$ cdtohome unset
dnl

AT_SETUP([$ cdtohome unset])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'unset cdtohome; cd'], 1, , [cd: Too few arguments.
])

AT_CLEANUP()


dnl
dnl	$ matchbeep
dnl

TCSH_VAR_UNSET([matchbeep])


dnl
dnl	$ nobeep
dnl

TCSH_VAR_UNSET([nobeep])


dnl
dnl	$ noclobber
dnl

dnl Functionality tested with "Command execution"
TCSH_VAR_UNSET([noclobber])


dnl
dnl	$ noding
dnl

TCSH_VAR_UNSET([noding])


dnl
dnl	$ noglob
dnl

dnl Functionality tested with "Filename substitution" and
dnl "Directory stack substitution"
TCSH_VAR_UNSET([noglob])


dnl
dnl	$ nostat
dnl

TCSH_VAR_UNSET([nostat])


dnl
dnl	$ notify
dnl

TCSH_VAR_UNSET([notify])


dnl
dnl	$ oid
dnl

TCSH_UNTESTED([$ oid])


dnl
dnl	$ owd
dnl

AT_SETUP([$ owd])
AT_KEYWORDS([variables])

AT_DATA([owd.csh],
[[echo $owd
cd /
echo $owd
pushd /bin
echo $owd
popd
echo $owd
]])
AT_CHECK([tcsh -f owd.csh | sed "s,$PWD,CWD,"], ,
[
CWD
/bin / @&t@
/
/ @&t@
/bin
])

AT_CLEANUP()


dnl
dnl	$ path
dnl

AT_SETUP([$ path])
AT_KEYWORDS([variables])

mkdir subdir
AT_DATA([script.sh],
[[echo home
]])
AT_DATA([subdir/script.sh],
[[echo subdir
]])
chmod a+x script.sh subdir/script.sh
AT_DATA([path.csh],
[[echo $?path
set path=(. subdir)
script.sh
set path=(subdir .)
script.sh
printenv PATH
setenv PATH :foo::bar:
echo $path
]])
AT_CHECK([tcsh -f path.csh], ,
[1
home
subdir
subdir:.
. foo . bar .
])

AT_CLEANUP()


dnl
dnl	$ printexitvalue
dnl

AT_SETUP([$ printexitvalue])
AT_KEYWORDS([variables])

echo 'exit 1' > myfalse
chmod +x myfalse

AT_DATA([printexitvalue.csh],
[[echo $?printexitvalue
set printexitvalue
./myfalse
(exit 3 >/dev/null)
:
]])
AT_CHECK([tcsh -f printexitvalue.csh], ,
[0
Exit 1
Exit 3
])

AT_CLEANUP()


dnl
dnl	$ prompt
dnl

AT_SETUP([$ prompt])
AT_KEYWORDS([variables])

AT_DATA([prompt.csh],
[[echo "$prompt"
set home=$cwd
mkdir -p a/b
cd a/b
set var=value
set prompt='%/,%~,%c,%.,%c2,%.2,%c01,%.01,%C,%h,%\!,\!,%%,%j,%$var,%#,%? '
(exit 50)
]])
AT_CHECK([tcsh -f -i -q < prompt.csh | sed "s,$PWD,CWD,"], ,
[> %# @&t@
CWD/a/b,~/a/b,b,b,~/a/b,~/a/b,~/<1>b,~/<1>b,b,8,8,8,%,0,value,>,50 exit
])

AT_CLEANUP()


dnl
dnl	$ prompt2
dnl

AT_SETUP([$ prompt2])
AT_KEYWORDS([variables])

AT_CHECK([echo 'echo "$prompt2"' | tcsh -f], ,
[%R? @&t@
])

AT_CLEANUP()


dnl
dnl	$ prompt3
dnl

AT_SETUP([$ prompt3])
AT_KEYWORDS([variables])

AT_CHECK([echo 'echo "$prompt3"' | tcsh -f], ,
[Correct > %R [[y|n|E|a]]? @&t@
])

AT_CLEANUP()


dnl
dnl	$ promptchars
dnl

AT_SETUP([$ promptchars])
AT_KEYWORDS([variables])

AT_DATA([promptchars.csh],
[[echo $?promptchars
set promptchars=_x
]])
AT_CHECK([tcsh -f  -i -q < promptchars.csh], ,
[> 0
_ exit
])

AT_CLEANUP()


dnl
dnl	$ pushdtohome
dnl

dnl Functionality tested with "pushd"
TCSH_VAR_UNSET([pushdtohome])

dnl
dnl	$ pushdsilent
dnl

dnl Functionality tested with "pushd"
TCSH_VAR_UNSET([pushdsilent])


dnl
dnl	$ recexact
dnl

TCSH_VAR_UNSET([recexact])


dnl
dnl	$ recognize_only_executables
dnl

TCSH_VAR_UNSET([recognize_only_executables])


dnl
dnl	$ rmstar
dnl

TCSH_VAR_UNSET([rmstar])


dnl
dnl	$ rprompt
dnl

AT_SETUP([$ rprompt])
AT_KEYWORDS([variables])

AT_DATA([rprompt.csh],
[[echo $?rprompt
set home=$cwd
mkdir -p a/b
cd a/b
set var=value
set rprompt='%/,%~,%c,%.,%c2,%.2,%c01,%.01,%C,%h,%\!,\!,%%,%j,%$var,%#,%?'
(exit 50)
]])
AT_CHECK([tcsh -f -i -q < rprompt.csh | sed "s,$PWD,CWD,"], ,
[> 0
> CWD/a/b,~/a/b,b,b,~/a/b,~/a/b,~/<1>b,~/<1>b,b,8,8,8,%,0,value,>,50 exit
])

AT_CLEANUP()


dnl
dnl	$ savedirs
dnl

TCSH_VAR_UNSET([savedirs])


dnl
dnl	$ savehist
dnl

dnl Functionality tested in "History performance"
TCSH_VAR_UNSET([savehist])


dnl
dnl	$ sched
dnl

TCSH_VAR_UNSET([sched])


dnl
dnl	$ shell
dnl

AT_SETUP([$ shell])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo $?shell'], ,
[1
])

AT_CHECK([SHELL=foo/tcsh tcsh -f -c 'echo $shell'], ,
[foo/tcsh
])

AT_CLEANUP()


dnl
dnl	$ shlvl
dnl

AT_SETUP([$ shlvl])
AT_KEYWORDS([variables])

AT_DATA([shlvl.csh],
[[echo $shlvl
set shlvl=8
printenv SHLVL
setenv SHLVL 2
echo $shlvl
tcsh -f -c 'echo $shlvl'
tcsh -f -c 'tcsh -f -c "printenv SHLVL"'
tcsh -f -c 'exec tcsh -f -c "printenv SHLVL"'
tcsh -f -c '(exec tcsh -f -c "printenv SHLVL")'
]])
AT_CHECK([env SHLVL=5 tcsh -f shlvl.csh], ,
[6
8
2
3
4
3
4
])

AT_CLEANUP()


dnl
dnl	$ status
dnl

AT_SETUP([$ status])
AT_KEYWORDS([variables])

AT_DATA([status.csh],
[[echo $status
sh -c 'kill -ABRT $$'
if ( $status > 128 ) echo OK
true
echo $status
]])
AT_CHECK([tcsh -f status.csh 2>&1 | sed '
  /^qemu: uncaught target signal 6 / d
  s/Abort *(core dumped)/Abort/
'], ,
[0
Abort
OK
0
])

AT_CLEANUP()


dnl
dnl	$ symlinks
dnl

AT_SETUP([$ symlinks])
AT_KEYWORDS([variables])

AT_DATA([symlinks.csh],
[[echo $?symlinks
set home=$cwd
mkdir -p a/b
ln -s a/b link
set symlinks=chase
cd link
echo $cwd
cd
set symlinks=ignore
cd link
echo $cwd
cd ..
echo $cwd
set symlinks=expand
cd a
(echo ../a; echo $cwd) | uniq | wc -l | tr -d ' \t'
]])
AT_CHECK([tcsh -f symlinks.csh | sed "s,`tcsh -f -c echo\\ \\$PWD`,CWD,"], ,
[0
CWD/a/b
CWD/link
CWD
1
])

AT_CLEANUP()


dnl
dnl	$ tcsh
dnl

AT_SETUP([$ tcsh])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo $?tcsh'], ,
[1
])

AT_CLEANUP()


dnl
dnl	$ term
dnl

AT_SETUP([$ term])
AT_KEYWORDS([variables])

AT_DATA([term.csh],
[[echo $term
set term=foo
printenv TERM
setenv TERM bar
echo $term
]])
AT_CHECK([TERM=something tcsh -f term.csh], ,
[something
foo
bar
])

AT_CHECK([(unset TERM; tcsh -f -c 'echo $?term; printenv TERM')], 1,
[0
])

AT_CLEANUP()


dnl
dnl	$ time
dnl

TCSH_VAR_UNSET([time])


dnl
dnl	$ tperiod
dnl

TCSH_VAR_UNSET([tperiod])


dnl
dnl	$ tty
dnl

AT_SETUP([$ tty])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo ">$tty<"' < /dev/null], ,
[><
])

AT_CLEANUP()


dnl
dnl	$ uid
dnl

AT_SETUP([$ uid])
AT_KEYWORDS([variables])

AT_CHECK([(tcsh -f -c 'echo $uid'; id -ru) | uniq | wc -l | tr -d ' \t'], ,
[1
])

AT_CLEANUP()


dnl
dnl	$ user
dnl

AT_SETUP([$ user])
AT_KEYWORDS([variables])

AT_DATA([user.csh],
[[echo $?user
set user=foo
printenv USER
setenv USER bar
echo $user
]])
AT_CHECK([tcsh -f user.csh], ,
[1
foo
bar
])

AT_CHECK([(unset USER; LOGNAME=foo tcsh -f -c 'echo $user; printenv USER')], ,
[foo
foo
])

AT_CHECK([(unset LOGNAME; USER=foo tcsh -f -c 'echo $user; printenv LOGNAME')],
 ,
[foo
foo
])

AT_CLEANUP()


dnl
dnl	$ verbose
dnl

AT_SETUP([$ verbose])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -v -c 'echo $verbose'], , [
],
[echo $verbose
])

AT_DATA([verbose.csh],
[[echo $?verbose
set verbose
echo $verbose
!!
]])
AT_CHECK([tcsh -f -i -q < verbose.csh], ,
[> 0


> exit
],
[echo $verbose
echo $verbose
])

AT_CLEANUP()


dnl
dnl	$ version
dnl

AT_SETUP([$ version])
AT_KEYWORDS([variables])

AT_CHECK([tcsh -f -c 'echo $?version'], ,
[1
])

AT_CLEANUP()


dnl
dnl	$ visiblebell
dnl

TCSH_VAR_UNSET([visiblebell])


dnl
dnl	$ watch
dnl

TCSH_VAR_UNSET([watch])


dnl
dnl	$ who
dnl

TCSH_VAR_UNSET([who])


dnl
dnl	$ wordchars
dnl

TCSH_VAR_UNSET([wordchars])


dnl Nothing to test for environment variables,
dnl except for the synchronization above.
